var _user$project$PascalTriangle$factorialHelp = F2(
	function (n, x) {
		factorialHelp:
		while (true) {
			var _p0 = n;
			switch (_p0) {
				case 0:
					return 0;
				case 1:
					return x;
				default:
					var _v1 = n - 1,
						_v2 = x * n;
					n = _v1;
					x = _v2;
					continue factorialHelp;
			}
		}
	});
var _user$project$PascalTriangle$factorial = function ($int) {
	return (_elm_lang$core$Native_Utils.cmp($int, 0) > 0) ? A2(_user$project$PascalTriangle$factorialHelp, $int, 1) : 0;
};
var _user$project$PascalTriangle$pascalValue = F2(
	function (row, column) {
		var calculatedValue = (_user$project$PascalTriangle$factorial(row) / (_user$project$PascalTriangle$factorial(column) * _user$project$PascalTriangle$factorial(row - column))) | 0;
		return _elm_lang$core$Native_Utils.eq(calculatedValue, 0) ? 1 : calculatedValue;
	});
var _user$project$PascalTriangle$listToNHelp = F2(
	function (k, list) {
		listToNHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(k, 0) < 0) {
				return list;
			} else {
				var _v3 = k - 1,
					_v4 = {ctor: '::', _0: k, _1: list};
				k = _v3;
				list = _v4;
				continue listToNHelp;
			}
		}
	});
var _user$project$PascalTriangle$listToN = function (n) {
	return A2(
		_user$project$PascalTriangle$listToNHelp,
		n - 1,
		{ctor: '[]'});
};
var _user$project$PascalTriangle$pascalTriangleRow = function (row) {
	return A2(
		_elm_lang$core$List$map,
		_user$project$PascalTriangle$pascalValue(row),
		_user$project$PascalTriangle$listToN(row + 1));
};
var _user$project$PascalTriangle$pascalTriangle = function (k) {
	return A2(
		_elm_lang$core$List$map,
		function (row) {
			return _user$project$PascalTriangle$pascalTriangleRow(row);
		},
		_user$project$PascalTriangle$listToN(k));
};
